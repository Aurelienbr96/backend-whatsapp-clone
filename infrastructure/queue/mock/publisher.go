// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPublisher is a mock of IPublisher interface.
type MockIPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIPublisherMockRecorder
}

// MockIPublisherMockRecorder is the mock recorder for MockIPublisher.
type MockIPublisherMockRecorder struct {
	mock *MockIPublisher
}

// NewMockIPublisher creates a new mock instance.
func NewMockIPublisher(ctrl *gomock.Controller) *MockIPublisher {
	mock := &MockIPublisher{ctrl: ctrl}
	mock.recorder = &MockIPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPublisher) EXPECT() *MockIPublisherMockRecorder {
	return m.recorder
}

// PushMessage mocks base method.
func (m *MockIPublisher) PushMessage(body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockIPublisherMockRecorder) PushMessage(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockIPublisher)(nil).PushMessage), body)
}
